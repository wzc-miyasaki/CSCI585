# Homework 2

Student Name:   Zecheng Wang



### Livesql Link
Q1 link:  https://livesql.oracle.com/apex/livesql/s/bb0900e773g0s4m19oxx0a80x
Q2 link:  https://livesql.oracle.com/apex/livesql/s/bb4t9so2r7tdc6n5a5kv9f3cf
Q3 link:  https://livesql.oracle.com/apex/livesql/s/bb1iggn11sjt5kfnrbater4lm
Q4 link:  https://livesql.oracle.com/apex/livesql/s/bb1sglzhxs6km7xmgqo653xwf


### Q1
In this question, I created three tables with some dummy data:  
    - "procedures":     it maintains a list of procedure IDs with their corresponding name.
    - "medicalRecord":  it maintains all the medical records of a patient. In this question, it serves to keep track of all procedures that a patient has taken.  
    - "BillingRecord":  it maintains the bill information. Each bill is associated with a medical record. 

To retrieve the average procedure cost and procedure duration, I apply "inner join" to combine these three tables together based on their IDs. I also pass 
a specific date as a condition parameter to filter the rows whose dates are matched. In my livesql result, I make this statement a subquery so that I can
directly apply the "AVG" aggregation function on the result of the subquery to compute the average cost and duration. 


### Q2
Tables that I have created for question2:
    - "medicalRecord"
    - "medicalRecord"
    - "BillingRecord"

I simply reuse the same tables that I had created in question 1. The purpose of this problem is to apply "SUM" aggregation function to compute total income on a 
given date. Since the BillingRecord keeps track of the bills with their actual payment date, I simply perform the SUM operation on the BillingRecord table only.
The "WHERE" allows me to perform operation on the records that has matched date. 

Notice that, the date of medicalRecord shows the actual date of a procedure, whereas the date of BillingRecord refers to the actual date that a patient makes payment.
Therefore, that's why both table keeps track of the date. 


### Q3
Tables that I have created:
    - "employee"ï¼š      it has two columns, `employee id` and `full name`
    - "capability":     it has two columns, `employee id` and `skill`.  Both ID and skill name form a composite key that uniquely identify each row because of 
                        the fact that an employee could have more than one skill.  

In this question, one can easily retrive the employees who have certain skills by using "WHERE skill IN ( expected_skill_list )".  The sql key word "IN" takes
a list of parameters in order to filter the rows whose "skill" attribute belongs to that list. Another sql key word "COUNT" will count number of skills that
an employee has matched. As a result, a combination of these two key words will filter the employees whose skills match all the requirements from the skill list.



### Q4
Assuming that a company has the following tables in their database, the goal is to come up with a reasonable query that uses all the tables:
    - "employee"
    - "procedures"
    - "procedureAppointment":   each record maintains the information of an appointment:  doctor id and patient id; 
    - "medicalRecord"
    - "BillingRecord"
All the table has same attributes as previous three questions, except that I add one more attribute (appointment_id) to medicalRecord table in order to create
relationship between these two tables. 

What my query does:   
    For a given date, this system identifies all procedural appointments and assesses the performance of the doctors who conducted these procedures. "Performance" 
is evaluated in terms of the "total income" generated by each doctor on that day. The boss may increase the salary of an employee based on this report. Therefore,
I use several "inner join" operation to combine all the tables together to retrieve the complete information regarding each procedure on a specific date.  